<?phprequire_once(ROOT . "/vfoundation.php");require_once(ROOT . "/data/player.php");require_once(ROOT . "/data/errorReport.php");abstract class Environment extends BaseEnvironment {	public static function get($trace = true) {		$existing = parent::get();				if (isset($existing)) {			assert($existing instanceof self);		}				return $existing;	}		public $player = null;		public function __construct($trace = true) {		parent::__construct($trace);				if ($currentPlayerID = $this->intFromSession("currentPlayerID", false))			$this->player = Player::table()->recall($currentPlayerID, false);	}		public function loginPlayer(Player $player) {		$_SESSION["currentPlayerID"] = $player->id;		$this->player = $player;		LoggedIn::draft()->insert();	}		public function logoutPlayer() {		LoggedOut::draft()->insert();		$_SESSION["currentPlayerID"] = NULL;		unset($_SESSION["currentPlayerID"]);		$this->player = null;	}		protected function setStatus($status) {		assert(!headers_sent());		assert(is_int($status));		$header = $_SERVER["SERVER_PROTOCOL"] . " " . $status;		header($header);	}		public function setStatusAndExit($status, $message = null) {		$this->setStatus($status);		if (isset($message))			echo $message;		exit;	}		protected function filteredUnsafeString($key, $string) {		Logger::log("Filtered unsafe string: {$key}='{$string}'");	}		public abstract function handleError(vexception $reason);		public abstract function setPlayersOnly();		public abstract function setGuestsOnly();}class DirectEnvironment extends Environment {	public static function get($trace = true) {		if ($existing = parent::get()) {			assert($existing instanceof self);			return $existing;		}				return new self($trace);	}		public function handleError(vexception $reason) {		$id = ReportableError::draft($reason->getMessage(), formatBacktrace($reason->getTrace()))->insert()->id;				$this->redirectAbsolute("/error.php?errorID=" . $id);	}		public function setPlayersOnly() {		if (!isset($this->player))			$this->redirectAbsolute("/grounds/home.php");	}		public function setGuestsOnly() {		if (isset($this->player))			$this->redirectToCorrectArea();	}		public function redirectToCorrectArea() {		if (!isset($this->player))			$this->redirectAbsolute("/grounds/home.php");				if (!$this->player->inGame())			$this->redirectAbsolute("/grounds/lobby.php");				switch ($this->player->getGame()->status) {		case Game::OPEN:			$this->redirectAbsolute("/grounds/parley.php");					case Game::PREBATTLE:			$this->redirectAbsolute("/grounds/customize.php");					case Game::PLAYING:			$this->redirectAbsolute("/play/index.php");		}	}		public function redirectAbsolute($absolute, $temporary = true) {		assert($absolute[0] == '/');				$this->setStatus($temporary ? 302 : 301);				$server = $_SERVER["SERVER_NAME"];		if (($port = $_SERVER["SERVER_PORT"]) != 80)			$server .= ":" . $port;		$absolute = $server . $absolute;				header("Location: http://" . $absolute);				exit;	}		public function redirectRelative($relative, $temporary = true) {		assert($relative[0] != '/');				$this->setStatus($temporary ? 302 : 301);				$server = $_SERVER["SERVER_NAME"];		if (($port = $_SERVER["SERVER_PORT"]) != 80)			$server .= ":" . $port;		$absolute = $server . dirname($_SERVER["PHP_SELF"]) . "/" . $relative;				header("Location: http://" . $absolute);		exit;	}}class RemoteEnvironment extends Environment {	public static function get($trace = true) {		if ($existing = parent::get()) {			assert($existing instanceof self);			return $existing;		}				return new self($trace);	}		public function handleError(vexception $e) {		$code = ($e instanceof vexception ? $e->httpcode : 500);				$this->setStatusAndExit($code, $e->getMessage());	}		public function setPlayersOnly() {		if (!isset($this->player))			throw new vexception(403, "You are not logged in as a player. Try logging in again.");	}		public function setGuestsOnly() {		if (isset($this->player))			throw new vexception(403, "This page is not for logged in players");	}}class Page extends BasePage {	protected $rootDefinedInJS = false;	protected $springLoadingLoaded = false;		protected $mLeftColumnInsertion;	public function leftColumnInsertion() { return $this->mLeftColumnInsertion; }		protected $mRightColumnInsertion;	public function rightColumnInsertion() { return $this->mRightColumnInsertion; }		protected $mRightColumnLinkInsertion;		protected $mTemplatesInsertion;	protected $readyForTemplates = false;	public function templatesInsertion() {		if (!$this->readyForTemplates)			TagTemplate::create("div", "templates")->insertAround($this->mTemplatesInsertion);		$this->readyForTemplates = true;					return $this->mTemplatesInsertion;	}		const descriptionPriority = 'begin mHeadInsertion mLeftColumnInsertion mRightColumnInsertion mInsertion mTemplateInsertion end';		public function __construct() {		parent::__construct();				$this->includeCSS(ROOT . "/common/common.css");		$this->includeJS(ROOT . "/common/jquery.js");		$this->includeJS(ROOT . "/common/vtility.js");				StringTemplate::create('			<div id="footnotes">				Copyright © <a href="mailto:verdagon@gmail.com">Evan Ovadia</a>, 2009			</div>			<!-- Top left sphere designed by Yannus Stark -->		')->insertBefore($this->insertion());				$this->mTemplatesInsertion = InsertionPoint::create(true, false)->insertAfter($this->insertion());				TagTemplate::create("div", "container")->insertAround($this->insertion());				StringTemplate::create('			<div id="top">				<div id="left"></div>				<div id="innerLeft"></div>				<div id="middle"></div>				<div id="innerRight"></div>				<div id="right"></div>				<img src="{$1}/common/images/leftStarky.png" id="leftStarky" />				<img src="{$1}/common/images/leftNobilia.png" id="leftNobilia" />			</div>		', ROOT)->insertBefore($this->insertion());				$this->mLeftColumnInsertion = InsertionPoint::create(true, true)->insertBefore($this->insertion());			TagTemplate::create("div", "leftColumnContainer")->insertAround($this->mLeftColumnInsertion);				$this->mLeftColumnLinkInsertion = InsertionPoint::create(true, true)->insertBefore($this->mLeftColumnInsertion);					TagTemplate::create("div", "leftSeparator")->insertAround($this->mLeftColumnLinkInsertion);				TagTemplate::create("div", "leftColumn")->insertAround($this->mLeftColumnInsertion);						$this->mRightColumnInsertion = InsertionPoint::create(true, true)->insertBefore($this->insertion());			TagTemplate::create("div", "rightColumnContainer")->insertAround($this->mRightColumnInsertion);				$this->mRightColumnLinkInsertion = InsertionPoint::create(true, true)->insertBefore($this->mRightColumnInsertion);					TagTemplate::create("div", "rightSeparator")->insertAround($this->mRightColumnLinkInsertion);				TagTemplate::create("div", "rightColumn")->insertAround($this->mRightColumnInsertion);				TagTemplate::create("div", "mainColumnContainer")->insertAround($this->insertion());			TagTemplate::create("div", "mainColumn")->insertAround($this->insertion());	}		public function springLoadLeftColumn() {		assert(isset($this->mLeftColumnLinkInsertion));				if (!$this->springLoadingLoaded)			$this->includeJS(ROOT . "/common/springyColumn.js");				StringTemplate::create('<a href="#"></a>')->insertBefore($this->mLeftColumnLinkInsertion);		$this->mLeftColumnLinkInsertion = null;				StringTemplate::create('			<script type="text/javascript">				$(function() {					springLoadColumn("Left");				});			</script>		')->insertBefore($this->headInsertion());				$this->springLoadingLoaded = true;	}		public function springLoadRightColumn() {		assert(isset($this->mRightColumnLinkInsertion));				if (!$this->springLoadingLoaded)			$this->includeJS(ROOT . "/common/springyColumn.js");				StringTemplate::create('<a href="#"></a>')->insertBefore($this->mRightColumnLinkInsertion);		$this->mRightColumnLinkInsertion = null;				StringTemplate::create('			<script type="text/javascript">				$(function() {					springLoadColumn("Right");				});			</script>		')->insertBefore($this->headInsertion());				$this->springLoadingLoaded = true;	}		public function includeJS($js) {		$this->defineROOTInJS();		parent::includeJS($js);	}		public function defineROOTInJS() {		if ($this->rootDefinedInJS)			return;		StringTemplate::create('			<script type="text/javascript">				var ROOT = "{$1}";			</script>		', ROOT)->insertBefore($this->headInsertion());		$this->rootDefinedInJS = true;	}		public function enableChatHTML() {		StringTemplate::create('			<div id="chatContainer">				<div class="chatLog"></div>				<div class="chatClock"></div>				<div class="chatInputContainer">					<input type="text" class="chatInput" />					<button class="chatInputButton">Send</button>				</div>			</div>		')->insertBefore($this->rightColumnInsertion());				$this->includeJS(ROOT . "/common/chat.js");	}}?>