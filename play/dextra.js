function Dextra(view) {	this.view = view;		//this.showTextBox = new OsmBox("Showing\u00A0Text", "Hiding\u00A0Text", true, view.toggleText, view);	//this.showAnimationBox = new OsmBox("Showing\u00A0Animation", "Hiding\u00A0Animation", true);	//this.showElevationBox = new OsmBox("Showing\u00A0Elevation", "Hiding\u00A0Elevation", true, view.iris.toggleElevation, view.iris);		/*$("#togglesContainer").		append(this.showTextBox.createElement()).		append("<br />").		append(this.showAnimationBox.createElement()).		append("<br />").		append(this.showElevationBox.createElement());*/			$("#surrenderButton").click(function() {		controller.surrender();	});		$("#endTurnButton").click(function() {		controller.endTurn();		return false;	});		$("#viewMenuBack").click(function() {		view.dextra.hideMenu();		return false;	});		$("#unitPanelDetails").click(function() {		view.dextra.showUnitDetails();		return false;	});				this.inputLocks = 0;		this.turnIndicator = $("#turnIndicator");		this.viewingUnit = undefined;		$("#mapArea").mousemove(callback(this, function(e) {		this.mouseMove(e.pageX, e.pageY - 120);	}));		$("#mapArea").click(callback(this, function(e) {		this.mouseClick(this.view.scaleIn(e.pageX), this.view.scaleOut(e.pageY));	}));		$(document).keypress(callback(this, function(e) {		this.keyPress(e.which);	}));		/*resizeTimeout = undefined;	$(window).resize(callback(this, function() {		if (resizeTimeout != undefined)			clearTimeout(resizeTimeout);				this.resizeTimeout = setTimeout(callback(this, function() {			resizeTimeout = undefined;			this.view.windowResized();		}), 250);	}));*/}// MenusDextra.prototype.showMenu = function() {	if (this.inputLocks > 0)		return;		this.lockInput();		$("#viewMenu").makeVisible();}Dextra.prototype.hideMenu = function(duration) {	$("#viewMenu").makeInvisible();		this.unlockInput();		return false;}Dextra.prototype.hideMenuTemporarily = function(duration) {	if (this.menuDob.display != "none") {		alert("HideMenuTemporarily - menuDob isn't already visible!");		return;	}		this.lockInput();		$("#viewMenu").makeInvisible();		setTimeout("view.dextra.showMenuEndTemporary()", duration);}Dextra.prototype.showMenuEndTemporary = function() {	$("#viewMenu").makeVisible();		this.unlockInput();}Dextra.prototype.tileSelected = function(tile) {	}Dextra.prototype.unitSelected = function(unit) {	$("#unitPanel").makeVisible();		this.updateUnitMenu(unit);		this.viewingUnit = unit;}Dextra.prototype.gradient = function(ratio, red, green, blue) {	var resultRed = Math.round(256 * (1-ratio) + red * ratio);	var resultGreen = Math.round(0 * (1-ratio) + green * ratio);	var resultBlue = Math.round(0 * (1-ratio) + blue * ratio);	return "rgb(" + resultRed + ", " + resultGreen + ", " + resultBlue + ")";}Dextra.prototype.updateUnitMenu = function(unit) {	$("#unitPanelName").clearChildren().addtext(unit.name);		var healthElement = $("#unitPanelHealth");	healthElement.clearChildren().addtext(unit.healthPoints);	healthElement.addstyle("color", this.gradient(unit.health, 0, 256, 0));		var energyElement = $("#unitPanelEnergy");	energyElement.clearChildren().addtext(unit.energyPoints);	energyElement.addstyle("color", this.gradient(unit.energy, 256, 256, 0));		var magicElement = $("#unitPanelMagic");	magicElement.clearChildren().addtext(unit.magicPoints);	magicElement.addstyle("color", this.gradient(unit.magic, 0, 256, 256));		$("#unitPanelMaxHealth").clearChildren().addtext(unit.maxHealthPoints);	$("#unitPanelMaxEnergy").clearChildren().addtext(unit.maxEnergyPoints);	$("#unitPanelMaxMagic").clearChildren().addtext(unit.maxMagicPoints);}Dextra.prototype.showUnitDetails = function() {	var unit = this.viewingUnit;}// InputDextra.prototype.lockInput = function(duration) {	this.inputLocks++;		if (this.inputLocks > 0) {		view.sinistra.selectionDob.setUpdate("visible", false);		view.sinistra.hoverDob.setUpdate("visible", false);	}}Dextra.prototype.unlockInput = function() {	this.inputLocks--;		if (this.inputLocks < 1) {		view.sinistra.refreshSelection();	}}Dextra.prototype.mouseClick = function(x, y) {	console.log(this.inputLocks, x, y);		if (this.inputLocks > 0) {		return;	}		if (this.view.sinistra.currentHoveredHex == undefined) {		return;	}		this.view.sinistra.selectHex(view.sinistra.currentHoveredHex);}Dextra.prototype.mouseMove = function(x, y) {	if (this.panelHovered) {		return;	}		if (this.inputLocks != undefined) {		// != undefined because for some reason it was firing		// before we set the mouselayerdob mouseover event.				if (this.inputLocks > 0) {			return;		}	}		this.view.mouseMoved(x, y);}Dextra.prototype.checkThisPlayersTurn = function() {	if (game.currentTurnPlayerID == controller.thisPlayerID)		return true;		alert("It is not your turn. You can take action when your opponent is done with his turn.");	return false;}Dextra.prototype.keyPress = function(charCode) {	switch (charCode) {	case 63: // '?'		view.dextra.showMenu(true);		break;			case 97: // 'a'		if (this.checkThisPlayersTurn())			view.sinistra.startAttackUnit();		break;			case 109: // 'm'		if (this.checkThisPlayersTurn())			view.sinistra.startMoveUnit();		break;			case 27: // esc		break;	}}Dextra.prototype.turnStarted = function(player) {	if (player == this.view.coordinator.currentPlayer)		this.turnIndicator.empty().html("It is your turn. Make your moves and then hit \"end turn\".");	else		this.turnIndicator.empty().html("It is their turn. When they finish, it will be your turn again.");}// OsmBox, Awesome Checkbox ////////////////////////////////////////////////////////////// OsmBoxfunction OsmBox(trueText, falseText, checked, callback, context) {	this.elementID = "osmBox" + OsmBox.numInstances++;	this.trueText = trueText;	this.falseText = falseText;	this.checked = checked;	this.callback = callback;	this.context = context;}OsmBox.prototype.getText = function() {	return (this.checked ? this.trueText : this.falseText);}OsmBox.prototype.getClassName = function() {	return (this.checked ? "OsmBoxChecked" : "OsmBox");}OsmBox.prototype.createElement = function() {	return $('<a href="#"></a>').		attr("id", this.elementID).		click(interceptor(this, "onclick")).		html(this.getText()).		addClass(this.getClassName());}OsmBox.prototype.onclick = function() {	this.checked = !this.checked;		$("#" + this.elementID).		addClass(this.getClassName()).		html(this.getText());		if (this.callback != undefined) {		if (this.context == undefined) {			this.callback(this.checked);		}		else {			this.callback.call(this.context, this.checked);		}	}	}OsmBox.numInstances = 0;